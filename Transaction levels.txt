Transaction properties:
-----------------------
ACID:
Atomic: all or nothing
Consistency: the committed changes should maintain all constraints
Isolation: No transaction can interfere in the end result of another transaction
Durability: If any event of errors or power failures happen while transaction then there is a way to rollback the changes

http://www.byteslounge.com/tutorials/spring-transaction-isolation-tutorial

Transaction Anamolies:
----------------------
https://www.youtube.com/watch?v=CTCAo89fcQw

1)Dirty Read
2)Non-repeatable read
3)Phantom read

Dirty Read:
-----------
Transaction A: update product set price = 500 where productId=123;
Transaction B: select * from product where productId = 123;
A is rollback
Now B is dirty 

Non-repeatable read:
--------------------
Transaction A: select * from product where productId = 123;
Transaction B: update product set price = 500 where productId=123;
B is committed
Transaction A: select * from product where productId = 123;

Phantom read: 
-------------
Transaction A: select * from product where price<1000
Transaction B  insert into product(id,price) values(123,2000)
B is committed.
Transaction A: select * from product where price<1000

Solutions:(Transaction isolation levels)
----------
TRANSACTION_READ_UNCOMMITTED
TRANSACTION_READ_COMMITTED (can avoid dirty reads)
TRANSACTION_REPEATABLE_READ (can avaoid dirty read and non-repeatable read)
TRANSACTION_SERIALIZABLE (Table level lock)