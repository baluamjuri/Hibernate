Summary :
=========
Day 1:
-------------------------------------
1)Hibernate features 
	Translates to DB dependent queries
	Built in transaction support
	Connection pool support
	Cache support ( 2 levels)
	Throws unchecked exceptions
2)Configuration: 
	Parse the configuration
	By default it tries to parse hibernate.properties file, if not available hibernate.cfg.xml
	If you does not configure default files then you should provide the path of your configuration file
3)SessionFactory: Long lived, Immutable object and associates with connection pool
4)Session: Short lived, not thread safe, associates with connection object
5)POJO vs EJB (https://www.youtube.com/watch?v=0Y0A-QCSkjE - POJO Class and POJI | Hibernate Tutorial | Mr.Natraj)
  VO vs DTO vs BO (https://www.youtube.com/watch?v=GOvak6awDrI - VO Class vs BO Class vs DTO Class | Advanced Java Tutorial)
  Persistant java bean requirements - https://docs.oracle.com/cd/E19798-01/821-1841/bnbqb/index.html
5)@Id, @Column(nullable, unique), Identity generator, @Table, @Entity
Ex:	@Id
	@SequenceGenerator(name = "SEQ", sequenceName = "CST.CST_ENTITY_DATA_SEQ", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SEQ")	
	@Column(name = "MNEMONIC_DATA_ID")
	private Integer mnemonicDataId;
6)@Column, @Table are not mandatory
7)transient, persistent, detached states(https://www.baeldung.com/hibernate-save-persist-update-merge-saveorupdate)
	transient -> persistent : save, persist, merge, saveOrUpdate
	persistent -> detached : evict(-), clear()
	detached -> persistent : merge, saveOrUpdate, update
8)persist - inserts new record in transient state if it is already in cache then no action, return type is void, throws EntityExistsException if the entity being persisted already exists in the database with the same identifier
9)save - inserts new record every time in transient state, returns Serializable object(primary key)
10)update - makes detached entities to persistent
11)saveOrUpdate
	If you pass existed primary key then it will try to update the record
	If you does not pass primary key or non-existed pk it will tries to insert the record
	
*** 	persist, merge, remove are JPA methods
	save, update, saveOrUpdate, delete are hibernate methods
 	Deprecated from HB 6: save, update, saveOrUpdate
12)hbm2ddl.auto
	create: drops and create the tables
	update: update the tables and new columns
	validate: validates the tables and its columns
	create-drop: creates and drops tables, columns
13)show_sql property
14)format_sql property
15)auto commit property
	

Day 2:
-----------------------------------------
1)merge
	Returns persistent object, you should use this object further
	inserts or updates the record
	generates two queries(select, insert/update)
	Should not use in persistent state. It is generally not recommended and can lead to unexpected behavior or unnecessary database updates.
	When you call merge on a persistent entity, Hibernate will detach the entity from the current session. This means the entity is no longer managed by the session, and any changes made to the entity after detaching won't be tracked by the session. You may can use the returned object instead passed object to the method.
2)saveOrUpdate vs merge
3)get(.class,id), load(.class,id), load(obj, id)
4)get vs load
	eagerly loads | lazy load, uses proxy, loads when used | eager loads
	return value when no object: null | ObjectNotFoundException
5)evict(obj), clear()
6)Once Transaction committed, you cannot use the same transaction obj anymore
7)Criteria API
8)Restrictions(like, ilike)

Day 3:
------------------------------------------
1)Restrictions(or, and, eq, idEq, like, ilike, in ...)
2)sqlRestriction
	Native SQL conditions
3)Criterion, Junction, Disjunction, Conjunction, SimpleExpression, LogicalExpression
4)Projections for scalar queries
5)Projections for aggregate queries 
6)Pagenation using setFirstResult(), setMaxResults()

Day 4:
---------------------------
1)HQL
	can use for DML such as select, update, delete queries
	can use for insert rows from one table to another table, we cannot insert rows
	Not for DDL
	list()
	executeUpdate()
	Iterator for lazy loading
	N+1 problem	
2)Native SQL
	can use for both DML, DDL
	executeUpdate()
	does not support lazy loading
	addEntity()
3)Named parameters, positional parameters in HQL, Native SQL
4)Named queries
	@NamedQuery, @NamedQueries, @NamedNativeQuery, @NamedNativeQueries
	can write at any pojo
5)Filters
	@Filters, @Filter, @FilterDef, @ParamDef
	Filters should write at POJO, FilterDefs can write anywhere(at other hibernate POJO) 
	enabling and disabling filter
	
Day 5:
----------------------------
1)ManyToOne
	We can use the below one for both unidirectional as well as bidirectional
	//@ManyToOne
    //@JoinColumn(name="COMPANY_ID")
    //private Company company;
	
	References:
	http://websystique.com/hibernate/hibernate-many-to-one-unidirectional-annotation-example/
	http://websystique.com/hibernate/hibernate-many-to-one-bidirectional-annotation-example/

2)OneToMany
	we can use the below one only for bidirectional
	//@OneToMany(mappedBy="company")
	//private Set<Employee> employees;
	
	we can use the below one for unidirectional
	//@OneToMany
	//@JoinColumn(name="COMPANY_ID")
	//private Set<Employee> employees;
		
	References:
	http://websystique.com/hibernate/hibernate-many-to-one-bidirectional-annotation-example/
	http://stackoverflow.com/questions/12038380/how-to-define-unidirectional-onetomany-relationship-in-jpa
3)ManyToMany
	we can use the below one only for bidirectional
	//@ManyToMany(mappedBy = "employees")
    //private Set<Project> projects;
	
	we can use the below one for both unidirectional as well as bidirectional
	//@ManyToMany
	//@JoinTable(name = "EMP_PROJECTS", 
	//joinColumns = {@JoinColumn(name = "PROJECT_ID")},
	//inverseJoinColumns = { @JoinColumn(name = "EMP_ID") })
	//Set<Employee> employees;
	
	
	References:
	http://websystique.com/hibernate/hibernate-many-to-many-unidirectional-annotation-example/
	http://websystique.com/hibernate/hibernate-many-to-many-bidirectional-annotation-example/
4)cascading
	Persist operations on parent POJO reflects on child POJO
	Need to care about ALL, REMOVE
5)When to use load() and get()
	EX: If you need primary key of one entity to save another entity use load()

Day 6:
--------------------------
1) OneToOne
	a)Using foreign key association:
	
	//For unidirectional and bidirectional
	@OneToOne
    @JoinColumn(name="ADDRESS_ID")
    private Address address;
	
	//For bidirectional
	@OneToOne(mappedBy = "address")
	private Employee employee;
	
	References:
	http://websystique.com/hibernate/hibernate-one-to-one-unidirectional-with-foreign-key-associations-annotation-example/
	http://www.javainterviewpoint.com/hibernate-one-to-one-bidirectional-mapping-foreign-key/
	
	b)Using shared primary key:(Bi-directional)

	//For unidirectional and bidirectional
	@OneToOne
	@PrimaryKeyJoinColumn
	private Employee employee;
	
	//For bidirectional
	@OneToOne(mappedBy="employee", cascade=CascadeType.ALL)
	private Address address;
	
	References:
	http://websystique.com/hibernate/hibernate-one-to-one-bidirectional-with-shared-primary-key-annotation-example/
	
	
Day 7:
---------------------------------
Fetching Strategies
1)JPA	
	FetchType.LAZY - Loads associated records lazily
	FetchType.EAGER - Loads associated records eagerly
2)Hibernate
	FetchMode.JOIN
		same as FetchType.EAGER
		Generates 1 query 
		Ex: Fetch companies and its employees in a single query
	FetchMode.SELECT
		same as FetchType.LAZY
		Generates 1+N queries
		Ex: Fetch 'N' companies in one query and Employees of N companies in N queries
	FetchMode.SUBSELECT
		Generates 1+1 queries
		Ex: Fetch 'N' companies in one query and Employees of N companies in one query
	BatchSize
		Generates 1+N/size queries
		Ex: Let us suppose if there are 6 companies and each company having 100 employees. And if you mentioned the batchsize = 2 then it will generate one query to get all 6 companies and it will get employees of two companies at a time and repeats the same process for 3 times to fetch 6 companies employees. So Total 1+6/2 = 1+3 queries

3)@LazyCollection(LazyCollectionOption.EXTRA)


Pending:
--------------------------------
opensession vs getcurrentsession
	https://www.java2blog.com/difference-opensession-getcurrentsession-hibernate/

	If we talk about SessionFactory.openSession()

	It always create new Session object.
	You need to explicitly flush and close session objects.
	In single threaded environment it is slower than getCurrentSession.
	You do not need to configure any property to call this method.
	And If we talk about SessionFactory.getCurrentSession()

	It creates a new Session if not exists, else use same session which is in current hibernate context.
	You do not need to flush and close session objects, it will be automatically taken care by Hibernate internally.
	In single threaded environment it is faster than openSession.
	You need to configure additional property. "hibernate.current_session_context_class" to call getCurrentSession method, otherwise it will throw an exception.

	Values for the current_session_context_class will be,
	thread(local transaction)
	managed
	jta(global transaction)
	1. thread - session bound to a thread, for single thread execution if you call a getCurrentSession() then it will return you a same session object.

	2. managed - this provided for managing session from some external entity, something like intercepter. maintaining session in a ThreadLocal same as a "thread" 
	type, but having a different methods like bind(), unbind(), hasbind() to be used by external entity to maintain session in a context.

	3. jta - session will be bound to a transaction, as we says a transaction then we need application server for using this context class.
	
	* http://jpwh.org/examples/hia/caveatemptor/src/java/org/hibernate/auction/persistence/HibernateUtil.java
	
Inheritance strategies in HB:
	@MappedSuperclass – the parent classes, can't be entities
	InheritanceType.SINGLE_TABLE (Uses Discriminator column to differentiate)– The entities from different classes with a common ancestor are placed in a single table. 
	InheritanceType.JOINED (Inheritance is also with tables) – Each class has its table, and querying a subclass entity requires joining the tables.
	InheritanceType.TABLE_PER_CLASS (Table per concrete class ) - All the properties of a class are in its table, so no join is required.

Composite Primary key in Hibernate (@EmbeddedId, @Embeddable)
Callable statements through Hibernate and JDBC
Detached Criteria (subqueries and joins)
Joins in HQL
getCurrentSession  vs openSession
Local Transactions and Global transactions
Locking techniques
Hibernate Caching
What is service and service registry?

Exceptions:
==============
HibernateException: The general superclass for all Hibernate-specific exceptions.

NonUniqueResultException: Thrown when a query execution returns more than one result where only one result was expected.

QueryException: Thrown when a query is syntactically incorrect or when there is a problem with the query execution.

LazyInitializationException: Thrown when you attempt to access uninitialized lazy-loaded collections or associations outside the session scope.

ObjectNotFoundException: Thrown when an object is not found in the database or is no longer available.

PersistentObjectException: Thrown when there is a problem with persistent objects, such as re-associating a transient object with an already associated session.

StaleStateException: As mentioned earlier, this exception is thrown in optimistic locking scenarios when an entity's version is outdated due to concurrent updates.

TransientObjectException: Thrown when you try to save an object with a null identifier (primary key) or when you attempt to save an already persistent object as transient.

PropertyValueException: Thrown when there is a problem with the properties of an entity, such as null or invalid values for required properties.

ConstraintViolationException: This is a subclass of HibernateException and indicates that a constraint violation occurred when persisting or updating an entity, such as unique constraint violations.

ObjectDeletedException: Thrown when you try to access a deleted object that is no longer available in the session.

UnresolvableObjectException: Thrown when there is an attempt to resolve an unknown or unassociated object
